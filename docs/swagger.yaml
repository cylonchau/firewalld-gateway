basePath: /
definitions:
  api.Accept:
    properties:
      flag:
        type: boolean
    type: object
  api.Audit:
    properties:
      limit:
        $ref: '#/definitions/api.Limit'
    type: object
  api.Destination:
    properties:
      address:
        type: string
      invert:
        type: string
    type: object
  api.Drop:
    properties:
      flag:
        type: boolean
    type: object
  api.ForwardPort:
    properties:
      port:
        type: string
      protocol:
        type: string
      toaddr:
        type: string
      toport:
        type: string
    type: object
  api.IcmpBlock:
    properties:
      name:
        type: string
    type: object
  api.IcmpType:
    properties:
      name:
        type: string
    type: object
  api.Interface:
    properties:
      name:
        type: string
    type: object
  api.Limit:
    properties:
      value:
        type: string
    type: object
  api.Log:
    properties:
      level:
        type: string
      limit:
        $ref: '#/definitions/api.Limit'
      prefix:
        type: string
    type: object
  api.Mark:
    properties:
      limit:
        $ref: '#/definitions/api.Limit'
      set:
        type: string
    type: object
  api.Port:
    properties:
      port:
        type: string
      protocol:
        type: string
    type: object
  api.Protocol:
    properties:
      value:
        type: string
    type: object
  api.QuerySettings:
    properties:
      description:
        type: string
      forward:
        type: boolean
      forwardport:
        items:
          $ref: '#/definitions/api.ForwardPort'
        type: array
      icmp-block-inversion:
        type: boolean
      icmpblock:
        items:
          $ref: '#/definitions/api.IcmpBlock'
        type: array
      interface:
        items:
          $ref: '#/definitions/api.Interface'
        type: array
      masquerade:
        type: boolean
      port:
        items:
          $ref: '#/definitions/api.Port'
        type: array
      protocol:
        items:
          $ref: '#/definitions/api.Protocol'
        type: array
      rule:
        items:
          $ref: '#/definitions/api.Rule'
        type: array
      service:
        items:
          type: string
        type: array
      short:
        type: string
      source:
        items:
          $ref: '#/definitions/api.Source'
        type: array
      sourceport:
        items:
          $ref: '#/definitions/api.SourcePort'
        type: array
      target:
        type: string
      version:
        type: string
    required:
    - description
    - short
    - target
    type: object
  api.Reject:
    properties:
      flag:
        type: boolean
    type: object
  api.Rule:
    properties:
      accept:
        $ref: '#/definitions/api.Accept'
      audit:
        $ref: '#/definitions/api.Audit'
      destination:
        $ref: '#/definitions/api.Destination'
      drop:
        $ref: '#/definitions/api.Drop'
      family:
        type: string
      forwardport:
        $ref: '#/definitions/api.ForwardPort'
      icmpblock:
        $ref: '#/definitions/api.IcmpBlock'
      icmptype:
        $ref: '#/definitions/api.IcmpType'
      limit:
        $ref: '#/definitions/api.Limit'
      log:
        $ref: '#/definitions/api.Log'
      mark:
        $ref: '#/definitions/api.Mark'
      port:
        $ref: '#/definitions/api.Port'
      protocol:
        $ref: '#/definitions/api.Protocol'
      reject:
        $ref: '#/definitions/api.Reject'
      service:
        items:
          type: string
        type: array
      source:
        $ref: '#/definitions/api.Source'
      value:
        $ref: '#/definitions/api.Value'
    type: object
  api.ServiceSetting:
    properties:
      description:
        type: string
      destination:
        additionalProperties:
          type: string
        type: object
      module:
        items:
          type: string
        type: array
      port:
        items:
          $ref: '#/definitions/api.Port'
        type: array
      protocol:
        items:
          type: string
        type: array
      short:
        type: string
      source_ports:
        items:
          type: string
        type: array
      version:
        type: string
    type: object
  api.Source:
    properties:
      address:
        type: string
      invert:
        type: string
      ipset:
        type: string
      mac:
        type: string
    type: object
  api.SourcePort:
    properties:
      port:
        type: string
      protocol:
        type: string
    type: object
  api.Value:
    properties:
      value:
        type: string
    type: object
  query.AllocateRoleQuery:
    properties:
      role_ids:
        items:
          type: integer
        type: array
      user_id:
        type: integer
    required:
    - role_ids
    - user_id
    type: object
  query.BatchForwardQuery:
    properties:
      delay:
        type: integer
      forwards:
        items:
          $ref: '#/definitions/query.ForwardQuery'
        type: array
    type: object
  query.BatchPortQuery:
    properties:
      delay:
        type: integer
      ports:
        items:
          $ref: '#/definitions/query.PortQuery'
        type: array
    type: object
  query.BatchRichQuery:
    properties:
      delay:
        type: integer
      richs:
        items:
          $ref: '#/definitions/query.RichQuery'
        type: array
    type: object
  query.BatchServiceQuery:
    properties:
      delay:
        type: integer
      services:
        items:
          $ref: '#/definitions/query.ServiceQuery'
        type: array
    type: object
  query.BatchSettingQuery:
    properties:
      delay:
        type: integer
      hosts:
        items:
          type: string
        type: array
    required:
    - hosts
    type: object
  query.BatchZoneQuery:
    properties:
      action_object:
        items:
          $ref: '#/definitions/query.ZoneDst'
        type: array
      delay:
        type: integer
    required:
    - action_object
    type: object
  query.ForwardQuery:
    properties:
      forward:
        $ref: '#/definitions/api.ForwardPort'
      ip:
        type: string
      timeout:
        type: integer
      zone:
        type: string
    required:
    - forward
    - ip
    type: object
  query.HostQuery:
    properties:
      hostname:
        type: string
      id:
        type: integer
      ip:
        type: string
      limit:
        type: integer
      offset:
        type: integer
      tag_id:
        type: integer
    required:
    - ip
    - tag_id
    type: object
  query.IDQuery:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  query.ListHostQuery:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      sort:
        type: string
    type: object
  query.ListQuery:
    properties:
      id:
        type: integer
      limit:
        type: integer
      offset:
        type: integer
      simple:
        type: integer
      sort:
        type: string
      title:
        type: string
    type: object
  query.PortEditQuery:
    properties:
      id:
        type: integer
      port:
        type: integer
      protocol:
        type: string
      template_id:
        type: integer
    required:
    - port
    - protocol
    - template_id
    type: object
  query.PortQuery:
    properties:
      ip:
        type: string
      port:
        $ref: '#/definitions/api.Port'
      timeout:
        type: integer
      zone:
        type: string
    required:
    - ip
    - port
    type: object
  query.Query:
    properties:
      forward:
        $ref: '#/definitions/api.ForwardPort'
      ip:
        type: string
      port:
        $ref: '#/definitions/api.Port'
      rich:
        $ref: '#/definitions/api.Rule'
      service:
        type: string
      timeout:
        type: integer
      zone:
        type: string
    required:
    - ip
    type: object
  query.RemoveQuery:
    properties:
      ip:
        type: string
      name:
        type: string
    required:
    - ip
    - name
    type: object
  query.RichEditQuery:
    properties:
      action:
        type: string
      destination:
        type: string
      family:
        type: string
      id:
        type: integer
      limit:
        type: integer
      limit_unit:
        type: string
      port:
        type: string
      protocol:
        type: string
      source:
        type: string
      template_id:
        type: integer
    required:
    - action
    - template_id
    type: object
  query.RichQuery:
    properties:
      ip:
        type: string
      rich:
        $ref: '#/definitions/api.Rule'
      timeout:
        type: integer
      zone:
        type: string
    required:
    - ip
    - rich
    type: object
  query.RoleEditQuery:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      router_ids:
        items:
          type: integer
        type: array
    required:
    - name
    type: object
  query.ServiceQuery:
    properties:
      ip:
        type: string
      service:
        type: string
      timeout:
        type: integer
      zone:
        type: string
    required:
    - ip
    - service
    type: object
  query.ServiceSettingQuery:
    properties:
      host:
        type: string
      service_name:
        type: string
      setting:
        $ref: '#/definitions/api.ServiceSetting'
    required:
    - host
    - service_name
    - setting
    type: object
  query.TagEditQuery:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
    required:
    - name
    type: object
  query.TemplateEditQuery:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      target:
        type: string
    required:
    - name
    type: object
  query.TokenEditQuery:
    properties:
      description:
        type: string
      id:
        type: integer
      is_update:
        type: boolean
      signed_to:
        type: string
    type: object
  query.UserEditQuery:
    properties:
      id:
        type: integer
      password:
        type: string
      role_ids:
        items:
          type: integer
        type: array
      username:
        type: string
    required:
    - username
    type: object
  query.UserQuery:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  query.ZoneDst:
    properties:
      host:
        type: string
      zone:
        type: string
    required:
    - host
    - zone
    type: object
  query.ZoneSettingQuery:
    properties:
      Setting:
        $ref: '#/definitions/api.QuerySettings'
      ip:
        type: string
    required:
    - Setting
    - ip
    type: object
host: localhost:2952
info:
  contact: {}
  description: Uranus, distrubed firewall gateway.
  title: Uranus API
  version: 0.0.9
paths:
  /fw/host:
    delete:
      consumes:
      - application/json
      description: Delete host with host id.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.IDQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Delete host with host id.
      tags:
      - Hosts
    get:
      consumes:
      - application/json
      description: Get host from uranus
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.ListHostQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get host from uranus
      tags:
      - Hosts
    post:
      consumes:
      - application/json
      description: Update host information with host id.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.HostQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Update host information with host id.
      tags:
      - Hosts
    put:
      consumes:
      - application/json
      description: Add a new host into uranus.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.HostQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Add a new host into uranus.
      tags:
      - Hosts
  /fw/tag:
    delete:
      consumes:
      - application/json
      description: Delete tag with tag id.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.IDQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Delete tag with tag id.
      tags:
      - Tags
    get:
      consumes:
      - application/json
      description: Get tag list from uranus.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.ListQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Get tag list from uranus.
      tags:
      - Tags
    post:
      consumes:
      - application/json
      description: Update tag information with tag id.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.TagEditQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Update tag information with tag id.
      tags:
      - Tags
    put:
      consumes:
      - application/json
      description: Add a new tag into uranus.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.TagEditQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Add a new tag into uranus.
      tags:
      - Tags
  /fw/template:
    delete:
      consumes:
      - application/json
      description: Delete template with template id.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.IDQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Delete template with template id.
      tags:
      - Template
    get:
      consumes:
      - application/json
      description: List template.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.ListQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: List template.
      tags:
      - Template
    post:
      consumes:
      - application/json
      description: Update template information with template id.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.TemplateEditQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Update template information with template id.
      tags:
      - Template
    put:
      consumes:
      - application/json
      description: Create a new firewalld template.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.TemplateEditQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Create a new firewalld template.
      tags:
      - Template
  /fw/template/{id}:
    post:
      consumes:
      - application/json
      description: List template rules by template ID.
      parameters:
      - description: Template ID
        in: path
        name: template_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: List template rules.
      tags:
      - Template
  /fw/template/port:
    delete:
      consumes:
      - application/json
      description: Delete port rule with rule id.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.IDQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Delete port rule with rule id.
      tags:
      - Template
    get:
      consumes:
      - application/json
      description: List port rules.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.ListQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: List port rules.
      tags:
      - Template
    post:
      consumes:
      - application/json
      description: Update port rule information with port rule id.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.PortEditQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Update port rule information with port rule id.
      tags:
      - Template
    put:
      consumes:
      - application/json
      description: Create a new port rule to template.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.PortEditQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Create a new port rule to template.
      tags:
      - Template
  /fw/template/rich:
    delete:
      consumes:
      - application/json
      description: Delete rich rule with rule id.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.IDQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Delete rich rule with rule id.
      tags:
      - Template
    get:
      consumes:
      - application/json
      description: List rich rules.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.ListQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: List rich rules.
      tags:
      - Template
    post:
      consumes:
      - application/json
      description: Update rich rule information with rich rule id.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.RichEditQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Update rich rule information with rich rule id.
      tags:
      - Template
    put:
      consumes:
      - application/json
      description: Create a new rich rule to template.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.RichEditQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Create a new rich rule to template.
      tags:
      - Template
  /fw/v1/masquerade:
    delete:
      consumes:
      - application/json
      description: Disable masqerade on firewalld runtime.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.Query'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Disable masqerade on firewalld runtime.
      tags:
      - firewalld masquerade
    get:
      consumes:
      - application/json
      description: Get nat rule list on firewalld runtime.
      parameters:
      - description: body
        in: query
        name: ip
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: object
            type: array
      security:
      - BearerAuth: []
      summary: Get nat rule list on firewalld runtime.
      tags:
      - firewalld masquerade
    put:
      consumes:
      - application/json
      description: Enable masqerade on firewalld runtime.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.Query'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Enable masqerade on firewalld runtime.
      tags:
      - firewalld masquerade
  /fw/v1/nat:
    delete:
      consumes:
      - application/json
      description: Remove a nat rule at firewalld runtime.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.Query'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Remove a nat rule at firewalld runtime.
      tags:
      - firewalld NAT
    get:
      consumes:
      - application/json
      description: Get nat rules at firewalld runtime
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.Query'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Get nat rules at firewalld runtime.
      tags:
      - firewalld NAT
    put:
      consumes:
      - application/json
      description: Add a nat rule at firewall runtime.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.ForwardQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Add a nat rule at firewall runtime.
      tags:
      - firewalld NAT
  /fw/v1/ports:
    delete:
      consumes:
      - application/json
      description: Delete a firewalld port rule in runtime.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.PortQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete a firewalld port rule in runtime.
      tags:
      - firewalld port
    get:
      consumes:
      - application/json
      description: Get port rule at firewalld runtime.
      parameters:
      - description: body
        in: query
        name: ip
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: object
            type: array
      security:
      - BearerAuth: []
      summary: Get port rule at firewalld runtime.
      tags:
      - firewalld port
    put:
      consumes:
      - application/json
      description: Add port rule at firewalld runtime.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.Query'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Add port rule at firewalld runtime.
      tags:
      - firewalld port
  /fw/v1/rich:
    delete:
      consumes:
      - application/json
      description: Remove rich rule at firewalld runtimes.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.RichQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Remove rich rule at firewalld runtimes.
      tags:
      - firewalld rich
    get:
      consumes:
      - application/json
      description: Get rich rule list at firewalld runtimes.
      parameters:
      - description: body
        in: query
        name: ip
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: object
            type: array
      security:
      - BearerAuth: []
      summary: Get rich rule list at firewalld runtimes.
      tags:
      - firewalld rich
    put:
      consumes:
      - application/json
      description: Add rich rule at firewalld runtimes.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.RichQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Add rich rule at firewalld runtimes.
      tags:
      - firewalld rich
  /fw/v1/service:
    delete:
      consumes:
      - application/json
      description: Remove a service rule on firewalld runtime.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.ServiceQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Remove a service rule on firewalld runtime.
      tags:
      - firewalld service
    get:
      consumes:
      - application/json
      description: List all service rule on firewalld runtime.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.ServiceQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: List available service type on firewalld runtime.
      tags:
      - firewalld service
    put:
      consumes:
      - application/json
      description: Add a service rule on firewalld runtime.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.ServiceQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Add a service rule on firewalld runtime.
      tags:
      - firewalld service
  /fw/v2/masquerade:
    delete:
      consumes:
      - application/json
      description: Disable masqerade at firewall permanent.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.Query'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Disable masqerade at firewall permanent.
      tags:
      - firewalld masquerade
    get:
      consumes:
      - application/json
      description: Get status of masqurade at firewalld permanent.
      parameters:
      - description: body
        in: query
        name: ip
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: object
            type: array
      security:
      - BearerAuth: []
      summary: Get status of masqurade at firewalld permanent.
      tags:
      - firewalld masquerade
    put:
      consumes:
      - application/json
      description: Enable masqerade at firewall permanent.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.Query'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Enable masqerade at firewall permanent.
      tags:
      - firewalld masquerade
  /fw/v2/nat:
    delete:
      consumes:
      - application/json
      description: Remove a nat rule at firewalld permanent.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.Query'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Remove a nat rule at firewalld permanent.
      tags:
      - firewalld NAT
    get:
      consumes:
      - application/json
      description: Get nat rules at firewalld permanent.
      parameters:
      - description: ip
        in: query
        name: ip
        required: true
        type: string
      - description: zone
        in: query
        name: zone
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Get nat rules at firewalld permanent.
      tags:
      - firewalld NAT
    put:
      consumes:
      - application/json
      description: Add a nat rule at firewall permanent.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.ForwardQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Add a nat rule at firewall permanent.
      tags:
      - firewalld NAT
  /fw/v2/ports:
    delete:
      consumes:
      - application/json
      description: Delete a firewalld port rule on permanent.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.PortQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete a firewalld port rule on permanent.
      tags:
      - firewalld port
    get:
      consumes:
      - application/json
      description: Get port rule on firewalld permanent.
      parameters:
      - description: body
        in: query
        name: ip
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: object
            type: array
      security:
      - BearerAuth: []
      summary: Get port rule on firewalld permanent.
      tags:
      - firewalld port
    put:
      consumes:
      - application/json
      description: Add port rule on firewalld permanent.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.Query'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Add port rule on firewalld permanent.
      tags:
      - firewalld port
  /fw/v2/rich:
    delete:
      consumes:
      - application/json
      description: Remove rich rule on firewalld permanent.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.RichQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Remove rich rule on firewalld permanent.
      tags:
      - firewalld rich
    get:
      consumes:
      - application/json
      description: Get rich rule list on firewalld permanent.
      parameters:
      - description: body
        in: query
        name: ip
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: object
            type: array
      security:
      - BearerAuth: []
      summary: Get rich rule list on firewalld permanent.
      tags:
      - firewalld rich
    put:
      consumes:
      - application/json
      description: Add rich on firewalld permanent.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.RichQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Add rich rule on firewalld permanent.
      tags:
      - firewalld rich
  /fw/v2/service:
    delete:
      consumes:
      - application/json
      description: Remove a service rule on firewalld premanent.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.ServiceQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Remove a service rule on firewalld premanent.
      tags:
      - firewalld service
    get:
      consumes:
      - application/json
      description: List all service rule on firewalld permanent.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.Query'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: List available service type on firewalld permanent.
      tags:
      - firewalld service
    put:
      consumes:
      - application/json
      description: Permanently add service to list of services used in zone.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.ServiceQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Permanently add service to list of services used in zone.
      tags:
      - firewalld service
  /fw/v2/service/config:
    get:
      consumes:
      - application/json
      description: Return list of service names (s) in runtime configuration.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.Query'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Return list of service names (s) in runtime configuration.
      tags:
      - firewalld service
    put:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.ServiceSettingQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      tags:
      - firewalld service
  /fw/v2/setting:
    delete:
      consumes:
      - application/json
      description: Remove a setting rules in firewalld.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.RemoveQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Remove a setting rules in firewalld.
      tags:
      - firewalld setting
    get:
      consumes:
      - application/json
      description: List zone.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.Query'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: List zone.
      tags:
      - firewalld setting
    put:
      consumes:
      - application/json
      description: Add setting rule in firewalld.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.ZoneSettingQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Add setting rule in firewalld.
      tags:
      - firewalld setting
  /fw/v2/setting/dp:
    get:
      consumes:
      - application/json
      description: Get default policy.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.Query'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Get default policy.
      tags:
      - firewalld setting
  /fw/v2/setting/dz:
    get:
      consumes:
      - application/json
      description: Get default zone.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.Query'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Get default zone.
      tags:
      - firewalld setting
  /fw/v2/setting/flush:
    post:
      consumes:
      - application/json
      description: Flush all firewalld rules to default.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.Query'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Flush all firewalld rules to default.
      tags:
      - firewalld setting
  /fw/v2/setting/reload:
    post:
      consumes:
      - application/json
      description: Reload firewalld.
      parameters:
      - description: ip
        in: query
        name: ip
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Reload firewalld.
      tags:
      - firewalld setting
  /fw/v2/setting/sdz:
    post:
      consumes:
      - application/json
      description: Set default zone in firewalld.
      parameters:
      - description: ip
        in: query
        name: ip
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Set default zone in firewalld.
      tags:
      - firewalld setting
  /fw/v3/masquerade:
    delete:
      consumes:
      - application/json
      description: Disable masqerade on firewalld runtime with delay timer.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.BatchZoneQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Disable masqerade on firewalld runtime with delay timer.
      tags:
      - firewalld masquerade
    put:
      consumes:
      - application/json
      description: Enable masqerade on firewalld runtime with delay timer.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.BatchZoneQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Enable masqerade on firewalld runtime with delay timer.
      tags:
      - firewalld masquerade
  /fw/v3/nat:
    put:
      consumes:
      - application/json
      description: Add a NAT rule on firewalld runtime with delay timer.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.BatchForwardQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Add a NAT rule on firewalld runtime with delay timer.
      tags:
      - firewalld NAT
  /fw/v3/ports:
    put:
      consumes:
      - application/json
      description: Add a port rule on firewalld runtime with delay timer.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.BatchPortQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Add a port rule on firewalld runtime with delay timer.
      tags:
      - firewalld port
  /fw/v3/ports/permanent:
    put:
      consumes:
      - application/json
      description: Add a port rule on firewalld permanent with delay timer.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.BatchPortQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Add a port rule on firewalld permanent with delay timer.
      tags:
      - firewalld port
  /fw/v3/rich:
    put:
      consumes:
      - application/json
      description: Add a rich rules on firewalld runtime with delay timer.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.BatchRichQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Add a rich rules on firewalld runtime with delay timer.
      tags:
      - firewalld rich
  /fw/v3/service:
    put:
      consumes:
      - application/json
      description: Add a service rule on firewalld runtime with delay timer.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.BatchServiceQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Add a service rule on firewalld runtime with delay timer.
      tags:
      - firewalld service
  /fw/v3/setting/reload/runtime:
    put:
      consumes:
      - application/json
      description: Reload firewalld runtime with delay timer.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.BatchSettingQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Reload firewalld runtime with delay timer.
      tags:
      - firewalld setting
  /fw/v3/setting/sdzone:
    post:
      consumes:
      - application/json
      description: Set default zone on firewalld with delay timer, this is a runtime
        and permanent change.
      parameters:
      - description: body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.BatchPortQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Set default zone on firewalld with delay timer, this is a runtime and
        permanent change.
      tags:
      - firewalld setting
  /ping:
    get:
      consumes:
      - application/json
      description: Return process status.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      summary: Return process status.
      tags:
      - Health
  /security/audit:
    get:
      consumes:
      - application/json
      description: Return all tokens.
      parameters:
      - description: token id
        in: query
        name: id
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: offset
        in: query
        name: offset
        type: integer
      - description: sort
        in: query
        name: sort
        type: string
      - description: sort
        in: query
        name: title
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Return all tokens.
      tags:
      - Audit
  /security/auth/cip:
    get:
      consumes:
      - application/json
      description: Get client login ip.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Get client login ip.
      tags:
      - Auth
  /security/auth/roleRouters:
    get:
      consumes:
      - application/json
      description: Return all routers of role。
      parameters:
      - description: Input parameter
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Return all routers of role.
      tags:
      - Auth
  /security/auth/roles:
    delete:
      consumes:
      - application/x-www-form-urlencoded
      description: Delete a role with role_id.
      parameters:
      - in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Delete a role with role_id.
      tags:
      - Auth
    get:
      consumes:
      - application/json
      description: Return all roles.
      parameters:
      - description: token id
        in: query
        name: id
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: offset
        in: query
        name: offset
        type: integer
      - description: sort
        in: query
        name: sort
        type: string
      - description: sort
        in: query
        name: title
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Return all roles.
      tags:
      - Auth
    post:
      consumes:
      - application/json
      description: Update token with role_id.
      parameters:
      - description: Input parameter
        in: body
        name: userinput
        required: true
        schema:
          $ref: '#/definitions/query.RoleEditQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Update token with role_id.
      tags:
      - Auth
    put:
      consumes:
      - application/json
      description: Create a role.
      parameters:
      - description: role body
        in: body
        name: userinput
        required: true
        schema:
          $ref: '#/definitions/query.RoleEditQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Create a role.
      tags:
      - Auth
  /security/auth/roles/{id}:
    get:
      consumes:
      - application/json
      description: Return roles associated with a specific user ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Return roles by user ID.
      tags:
      - Auth
  /security/auth/roles/allocate:
    post:
      consumes:
      - application/json
      description: allocate roles to user.
      parameters:
      - description: Input parameter
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/query.RoleEditQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: allocate roles to user.
      tags:
      - Auth
  /security/auth/routers:
    get:
      consumes:
      - application/json
      description: Return all routers.
      parameters:
      - description: limit
        in: query
        name: limit
        type: integer
      - description: offset
        in: query
        name: offset
        type: integer
      - description: sort
        in: query
        name: sort
        type: string
      - description: sort
        in: query
        name: title
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Return all routers.
      tags:
      - Auth
  /security/auth/routers/{id}:
    get:
      consumes:
      - application/json
      description: Return routers associated with a specific role ID.
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Return routers by role ID.
      tags:
      - Auth
  /security/auth/userRoles:
    get:
      consumes:
      - application/json
      description: Return all routers.
      parameters:
      - description: token id
        in: query
        name: id
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: offset
        in: query
        name: offset
        type: integer
      - description: sort
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Return all routers.
      tags:
      - Auth
  /security/auth/userinfo:
    get:
      consumes:
      - application/json
      description: Return userinfo.
      parameters:
      - description: token
        in: query
        name: token
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Return userinfo.
      tags:
      - Auth
  /security/tokens:
    delete:
      consumes:
      - application/x-www-form-urlencoded
      description: Delete a token with token_id.
      parameters:
      - in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Delete a token with token_id.
      tags:
      - Token
    get:
      consumes:
      - application/json
      description: Return all tokens.
      parameters:
      - description: token id
        in: query
        name: id
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: offset
        in: query
        name: offset
        type: integer
      - description: sort
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Return all tokens.
      tags:
      - Token
    post:
      consumes:
      - application/json
      description: Update token with token_id.
      parameters:
      - description: Input parameter
        in: body
        name: userinput
        required: true
        schema:
          $ref: '#/definitions/query.TokenEditQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Update token with token_id.
      tags:
      - Token
    put:
      consumes:
      - application/json
      description: Create a token.
      parameters:
      - description: token body
        in: body
        name: userinput
        required: true
        schema:
          $ref: '#/definitions/query.TokenEditQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Create a token.
      tags:
      - Token
  /security/users:
    delete:
      consumes:
      - application/x-www-form-urlencoded
      description: Delete a user.
      parameters:
      - in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Delete a user.
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Return all users。
      parameters:
      - description: limit
        in: query
        name: limit
        type: integer
      - description: offset
        in: query
        name: offset
        type: integer
      - description: sort
        in: query
        name: sort
        type: string
      - description: sort
        in: query
        name: title
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Return all users.
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a user。
      parameters:
      - description: Input parameter
        in: body
        name: userinput
        required: true
        schema:
          $ref: '#/definitions/query.UserEditQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: update user information.
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Create a user。
      parameters:
      - description: Input parameter
        in: body
        name: userinput
        required: true
        schema:
          $ref: '#/definitions/query.UserQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Create a user.
      tags:
      - Users
  /security/users/allocate:
    post:
      consumes:
      - application/json
      description: Assign roles to users。
      parameters:
      - description: Input parameter
        in: body
        name: id
        required: true
        schema:
          $ref: '#/definitions/query.AllocateRoleQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Assign roles to users.
      tags:
      - Users
  /sso/signin:
    post:
      consumes:
      - application/json
      description: login.
      parameters:
      - description: signup body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.UserQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: login.
      tags:
      - SSO
  /sso/signup:
    post:
      consumes:
      - application/json
      description: register.
      parameters:
      - description: user body
        in: body
        name: query
        schema:
          $ref: '#/definitions/query.UserQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: register.
      tags:
      - SSO
schemes:
- http
securityDefinitions:
  Bearer:
    description: 'Enter the token with the `Bearer: ` prefix, e.g. "Bearer abcde12345".'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
